CREATE TABLE public.customer(id integer,
    first_name text,
    last_name text,
    birthday date,
    phone_number text);
INSERT INTO public.customer VALUES (1, 'Nice', 'Customer', '1970-03-04', '+886 1234 5678');
CREATE FUNCTION write_and_return(val text) RETURNS text AS
$$
BEGIN
    INSERT INTO public.customer(id) VALUES (0);
    RETURN 'hoho';
END;
$$ LANGUAGE plpgsql;
LOAD 'pg_anonymize';
-- make sure our own user isn't masked
SELECT current_user \gset
SECURITY LABEL FOR pg_anonymize ON ROLE :current_user IS NULL;
-- test check_labels option
SET pg_anonymize.check_labels = 'on';
-- invalid expression
SECURITY LABEL FOR pg_anonymize ON COLUMN public.customer.first_name
    IS 'error';
ERROR:  column "error" does not exist
LINE 1: SELECT pg_typeof(error)::regtype::oid FROM public.customer L...
                         ^
QUERY:  SELECT pg_typeof(error)::regtype::oid FROM public.customer LIMIT 1
CONTEXT:  during validation of expression "error"
SECURITY LABEL FOR pg_anonymize ON COLUMN public.customer.first_name
    IS 'another error';
ERROR:  syntax error at or near "AS"
LINE 1: SECURITY LABEL FOR pg_anonymize ON COLUMN public.customer.fi...
                             ^
CONTEXT:  during validation of expression "another error"
-- wrong type
SECURITY LABEL FOR pg_anonymize ON COLUMN public.customer.first_name
    IS '1';
ERROR:  The expression returns "integer" type, but the  column is defined as "text"
-- underlying write
SECURITY LABEL FOR pg_anonymize ON COLUMN public.customer.first_name
    IS $$public.write_and_return(first_name)$$;
ERROR:  cannot execute INSERT in a read-only transaction
CONTEXT:  SQL statement "INSERT INTO public.customer(id) VALUES (0)"
PL/pgSQL function public.write_and_return(text) line 3 at SQL statement
SQL statement "SELECT pg_typeof(public.write_and_return(first_name))::regtype::oid FROM public.customer LIMIT 1"
during validation of expression "public.write_and_return(first_name)"
-- SQL injection
SECURITY LABEL FOR pg_anonymize ON COLUMN public.customer.first_name
    IS $$'some value'; INSERT INTO public.customer SELECT 1; --$$;
ERROR:  SQL injection detected!
-- unknown to non-text
SECURITY LABEL FOR pg_anonymize ON COLUMN public.customer.birthday
    IS $$'1970-01-01'$$;
ERROR:  The expression returns "unknown" type, but the  column is defined as "date"
-- unknown to text is ok with a notice
SECURITY LABEL FOR pg_anonymize ON COLUMN public.customer.last_name
    IS $$'some text'$$;
NOTICE:  The expression has an unknown type, you may want to explicitly cast it to text
-- catalog relations are not supported
SECURITY LABEL FOR pg_anonymize ON COLUMN pg_catalog.pg_statistic.stakind1
    IS $$'ERROR:  unsupported catalog relation "pg_statistic"'$$;
ERROR:  unsupported catalog relation "pg_statistic"
-- column name must be qualified
SECURITY LABEL FOR pg_anonymize ON COLUMN pg_ts_dict
    IS $$'ERROR:  column name must be qualified'$$;
ERROR:  column name must be qualified
-- only relations are supported
SECURITY LABEL FOR pg_anonymize ON TYPE INTEGER
	IS $$'ERROR:  pg_anonymize does not support "pg_type" catalog'$$;
ERROR:  pg_anonymize does not support "pg_type" catalog
-- Test various anonymization
SET pg_anonymize.enabled = 'on';
SECURITY LABEL FOR pg_anonymize ON COLUMN public.customer.last_name
    IS $$substr(last_name, 1, 1) || '*****'$$;
SECURITY LABEL FOR pg_anonymize ON COLUMN public.customer.birthday
    IS $$date_trunc('year', birthday)::date$$;
SECURITY LABEL FOR pg_anonymize ON COLUMN public.customer.phone_number
    IS $$regexp_replace(phone_number, '\d', 'X', 'g')$$;
-- current role should see the data
SELECT * FROM public.customer;
 id | first_name | last_name |  birthday  |  phone_number  
----+------------+-----------+------------+----------------
  1 | Nice       | Customer  | 03-04-1970 | +886 1234 5678
(1 row)

-- mask our own user
SELECT current_user \gset
SECURITY LABEL FOR pg_anonymize ON ROLE :current_user IS 'anonymize';
-- current role should see anonymized data
SELECT * FROM public.customer;
 id | first_name | last_name |  birthday  |  phone_number  
----+------------+-----------+------------+----------------
  1 | Nice       | C*****    | 01-01-1970 | +XXX XXXX XXXX
(1 row)

COPY public.customer TO STDOUT;
1	Nice	C*****	01-01-1970	+XXX XXXX XXXX
COPY public.customer(first_name, phone_number) TO STDOUT;
Nice	+XXX XXXX XXXX
COPY (SELECT * FROM public.customer) TO STDOUT;
1	Nice	C*****	01-01-1970	+XXX XXXX XXXX
-- plpgsql code should anonymize correctly
DO $$
DECLARE
	out_last_name text;
BEGIN
	SELECT last_name INTO out_last_name FROM public.customer;
	RAISE NOTICE 'got %', out_last_name;
END;
$$ language plpgsql;
NOTICE:  got C*****
-- current role should see normal data when pg_anonymize isn't enabled
SET pg_anonymize.enabled = 'off';
SELECT * FROM public.customer;
 id | first_name | last_name |  birthday  |  phone_number  
----+------------+-----------+------------+----------------
  1 | Nice       | Customer  | 03-04-1970 | +886 1234 5678
(1 row)

COPY public.customer TO STDOUT;
1	Nice	Customer	03-04-1970	+886 1234 5678
COPY public.customer(first_name, phone_number) TO STDOUT;
Nice	+886 1234 5678
-- cleanup
SET pg_anonymize.enabled = 'on';
SECURITY LABEL FOR pg_anonymize ON ROLE :current_user IS NULL;
-- current role should see normal data
SELECT * FROM public.customer;
 id | first_name | last_name |  birthday  |  phone_number  
----+------------+-----------+------------+----------------
  1 | Nice       | Customer  | 03-04-1970 | +886 1234 5678
(1 row)

